{"version":3,"file":"static/js/434.54f5c0a0.chunk.js","mappings":"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","sources":["hooks/useSelect.ts","components/Main/News/ArticleMeta/ArticleMeta.tsx","components/Main/News/Everything/EverythingList/EverythingList.tsx","components/Main/News/NewsSelect/NewsSelect.tsx","utils/makeSelectOptions.ts","components/Main/News/Everything/Filter/Filter.tsx","components/Main/News/Everything/Everything.tsx","components/Main/News/TopHeadlines/TopHeadlines.tsx","components/Main/News/News.tsx","components/PaginationApp/PaginationApp.tsx"],"sourcesContent":["import {useState} from \"react\";\r\n\r\nexport type ArrayOrValue<T> = T extends T[] ? T[] : T\r\n\r\nexport const useSelect = <T>(initialValue: ArrayOrValue<T>): [ArrayOrValue<T>, (v: string | string[]) => void] => {\r\n    const [value, setValue] = useState<ArrayOrValue<T>>(initialValue)\r\n\r\n    const onChange = (selectedValue: string | string[]) => {\r\n        if (selectedValue === value) return\r\n\r\n        setValue(selectedValue as ArrayOrValue<T>)\r\n    }\r\n\r\n    return [value, onChange]\r\n}","import React from 'react';\r\nimport {List} from \"antd\";\r\nimport {formatDistanceToNow} from \"date-fns\";\r\n\r\ntype ArticleMetaProps = {\r\n    url: string\r\n    title: string\r\n    author: string\r\n    publishedAt: string,\r\n    sourceName: string\r\n}\r\n\r\nfunction ArticleMeta({url, title, author, publishedAt, sourceName}: ArticleMetaProps) {\r\n    const timeAgo = formatDistanceToNow(new Date(publishedAt))\r\n    const description = `${author || sourceName}: ${timeAgo} ago`\r\n\r\n    return (\r\n        <List.Item.Meta\r\n            title={<a href={url} target='_blank'>{title}</a>}\r\n            description={description}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ArticleMeta;","import React, {useState} from 'react';\r\nimport {List} from \"antd\";\r\nimport PaginationApp from \"../../../../PaginationApp/PaginationApp\";\r\nimport AvatarApp from \"../../../../AvatarApp/AvatarApp\";\r\nimport ArticleMeta from \"../../ArticleMeta/ArticleMeta\";\r\nimport ErrorMessage from \"../../../../ErrorMessage/ErrorMessage\";\r\nimport {parseFetchError} from \"../../../../../utils/parseFetchError\";\r\nimport {SearchInMultiple, SortingOrder, useGetEverythingQuery} from \"../../../../../features/news/news\";\r\n\r\ntype EverythingListProps = {\r\n    query: string\r\n    sortBy: SortingOrder\r\n    searchIn: SearchInMultiple\r\n    sources: string\r\n    from: string\r\n    to: string\r\n}\r\n\r\nfunction EverythingList({query, sortBy, searchIn, sources, from, to}: EverythingListProps) {\r\n    const [page, setPage] = useState(1)\r\n    const [pageSize] = useState(10)\r\n    const handlePageChange = (page: number) => {\r\n        setPage(page)\r\n    }\r\n\r\n    const {data, isSuccess, isError, error} = useGetEverythingQuery({\r\n        q: query,\r\n        pageSize,\r\n        page,\r\n        language: 'en',\r\n        sortBy,\r\n        searchIn: searchIn,\r\n        sources: sources,\r\n        from,\r\n        to\r\n    }, {skip: query.length < 3})\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isSuccess &&\r\n                <List\r\n                    itemLayout=\"vertical\"\r\n                    size=\"large\"\r\n                    dataSource={data.articles}\r\n                    footer={<PaginationApp total={data.totalResults} current={page} pageSize={10}\r\n                                           handler={handlePageChange}/>}\r\n                    renderItem={(article) => (\r\n                        <List.Item\r\n                            key={article.title}\r\n                            extra={<AvatarApp src={article.urlToImage} size={272} shape='square'/>}\r\n                            style={{padding: '8px 0'}}\r\n                        >\r\n                            <ArticleMeta title={article.title} url={article.url} author={article.author}\r\n                                         publishedAt={article.publishedAt} sourceName={article.source.name}/>\r\n                            {article.content}\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            }\r\n\r\n            {\r\n                isError && <ErrorMessage text={parseFetchError(error)}/>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EverythingList;","import React from 'react';\r\nimport {Select, Typography} from \"antd\";\r\n\r\nconst {Text} = Typography;\r\n\r\ntype NewsSelectProps = {\r\n    heading?: string\r\n    isMultiple?: boolean\r\n    value: string | string[]\r\n    onChange: (value: string | string[]) => void\r\n\r\n    options: Array<{ value: string, label: string }>\r\n}\r\n\r\nfunction NewsSelect({heading, onChange, isMultiple, options, value}: NewsSelectProps) {\r\n    return (\r\n        <>\r\n            {heading && <Text style={{display: 'block', marginBottom: '4px'}}>{heading}: </Text>}\r\n            <Select\r\n                mode={isMultiple ? 'multiple' : undefined}\r\n                value={value}\r\n                onChange={onChange}\r\n                style={{width: '200px', marginBottom: '16px'}}\r\n                options={options}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewsSelect;","export const makeSelectOptions = (values: readonly string[]) => {\r\n    return values.map(v => ({value: v, label: v.charAt(0).toUpperCase() + v.slice(1)}))\r\n}","import React, {useMemo, useState} from 'react';\r\nimport {Col, DatePicker, Input, Row, Skeleton} from \"antd\";\r\nimport {SearchOutlined} from \"@ant-design/icons\";\r\nimport NewsSelect from \"../../NewsSelect/NewsSelect\";\r\nimport dayjs, {Dayjs} from \"dayjs\";\r\nimport {\r\n    SearchIn,\r\n    searchInValues,\r\n    SortingOrder,\r\n    sortingOrders,\r\n    useGetSourcesQuery\r\n} from \"../../../../../features/news/news\";\r\nimport {makeSelectOptions} from \"../../../../../utils/makeSelectOptions\";\r\n\r\nconst sortByOptions = makeSelectOptions(sortingOrders)\r\nconst searchInOptions = makeSelectOptions(searchInValues)\r\nconst {RangePicker} = DatePicker;\r\ntype RangeValue = [Dayjs | null, Dayjs | null] | null;\r\ntype FilterProps = {\r\n    query: string\r\n    onQueryChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n    sortBy: SortingOrder\r\n    onSortByChange: (v: string | string[]) => void\r\n    searchIn: SearchIn[]\r\n    onSearchInChange: (v: string | string[]) => void\r\n    searchInDefault: SearchIn[]\r\n    source: string[]\r\n    onSourceChange: (v: string | string[]) => void\r\n    setDateStrings: (v: string[]) => void\r\n}\r\n\r\nfunction Filter({\r\n                    query,\r\n                    onQueryChange,\r\n                    sortBy,\r\n                    onSortByChange,\r\n                    searchIn,\r\n                    onSearchInChange,\r\n                    searchInDefault,\r\n                    source,\r\n                    onSourceChange,\r\n                    setDateStrings\r\n                }: FilterProps) {\r\n    const [dates, setDates] = useState<RangeValue>(null);\r\n    const onDatesChange = (values: RangeValue, formatString: [string, string]) => {\r\n        setDates(values)\r\n        setDateStrings(formatString)\r\n    }\r\n    const disabledDate = (current: Dayjs) => {\r\n        const monthAgo = dayjs().subtract(1, 'month').startOf('day')\r\n        const endOfCurrent = dayjs().endOf('day')\r\n\r\n        return current && (current < monthAgo || current > endOfCurrent)\r\n    }\r\n\r\n    const {data, isLoading, isSuccess} = useGetSourcesQuery({\r\n        language: 'en',\r\n        country: 'us'\r\n    })\r\n\r\n    const sourceOptions = useMemo(() => {\r\n        if (isSuccess && data) {\r\n            return data.sources.map(source => ({value: source.id, label: source.name}))\r\n        }\r\n    }, [data, isSuccess])\r\n\r\n    const handleSourceChange = (v: string | string[]) => {\r\n        if (v.length > 20) return\r\n        onSourceChange(v)\r\n    }\r\n\r\n    const handleSearchInChange = (v: string | string[]) => {\r\n        onSearchInChange(v.length ? v : searchInDefault)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Input value={query}\r\n                   onChange={onQueryChange}\r\n                   size=\"large\"\r\n                   placeholder=\"Keywords or a phrase to search for\"\r\n                   prefix={<SearchOutlined/>}\r\n                   allowClear\r\n                   style={{marginBottom: '16px'}}/>\r\n\r\n            <Row gutter={16} style={{marginBottom: '36px'}}>\r\n                <Col span={8}>\r\n                    <NewsSelect heading={'Sort by'} options={sortByOptions} onChange={onSortByChange} value={sortBy}/>\r\n                    <RangePicker onChange={onDatesChange} value={dates}\r\n                                 disabledDate={disabledDate} allowEmpty={[true, true]}/>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <NewsSelect heading={'Search in'} value={searchIn} options={searchInOptions}\r\n                                onChange={handleSearchInChange} isMultiple={true}/>\r\n                </Col>\r\n                <Col span={8}>\r\n                    {isLoading &&\r\n                        <Skeleton.Input active style={{marginTop: '26px'}}/>}\r\n                    {isSuccess &&\r\n                        <NewsSelect heading={'Sources'}\r\n                                    options={sourceOptions!}\r\n                                    value={source}\r\n                                    onChange={handleSourceChange}\r\n                                    isMultiple={true}/>}\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Filter;","import React, {useDeferredValue, useState} from 'react';\r\nimport {SearchIn, SearchInMultiple, SortingOrder} from \"../../../../features/news/news\";\r\nimport {useSelect} from \"../../../../hooks/useSelect\";\r\nimport EverythingList from \"./EverythingList/EverythingList\";\r\nimport Filter from \"./Filter/Filter\";\r\n\r\nfunction Everything() {\r\n    const searchInDefault: SearchIn[] = ['title', 'description', 'content']\r\n\r\n    const [query, setQuery] = useState('')\r\n    const onQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => setQuery(e.target.value)\r\n    const deferredQuery = useDeferredValue(query);\r\n    const [sortBy, onSortByChange] = useSelect<SortingOrder>('relevancy')\r\n    const [searchIn, onSearchInChange] = useSelect<SearchIn[]>(searchInDefault)\r\n    const [source, onSourceChange] = useSelect<string[]>([])\r\n    const [dateStrings, setDateStrings] = useState<string[]>([])\r\n\r\n    const filterProps = {\r\n        query,\r\n        onQueryChange,\r\n        sortBy,\r\n        onSortByChange,\r\n        searchIn,\r\n        onSearchInChange,\r\n        searchInDefault,\r\n        source,\r\n        onSourceChange,\r\n        setDateStrings\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Filter {...filterProps}/>\r\n            <EverythingList query={deferredQuery}\r\n                            sortBy={sortBy}\r\n                            searchIn={searchIn.toString() as SearchInMultiple}\r\n                            sources={source.toString()}\r\n                            from={dateStrings[0]}\r\n                            to={dateStrings[1]}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Everything;","import React from 'react';\r\nimport {List, Skeleton, Typography} from \"antd\";\r\nimport {categories, Category, useGetTopHeadlinesQuery} from \"../../../../features/news/news\";\r\nimport ErrorMessage from \"../../../ErrorMessage/ErrorMessage\";\r\nimport {parseFetchError} from \"../../../../utils/parseFetchError\";\r\nimport ArticleMeta from \"../ArticleMeta/ArticleMeta\";\r\nimport NewsSelect from \"../NewsSelect/NewsSelect\";\r\nimport {useSelect} from \"../../../../hooks/useSelect\";\r\nimport {makeSelectOptions} from \"../../../../utils/makeSelectOptions\";\r\n\r\nconst {Title} = Typography;\r\n\r\nfunction TopHeadlines() {\r\n    const [category, onChangeCategory] = useSelect<Category>('general')\r\n\r\n    const {data, isLoading, isFetching, isSuccess, isError, error} = useGetTopHeadlinesQuery({\r\n        country: 'us',\r\n        category,\r\n        pageSize: 5,\r\n        page: 1\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Title level={2}>Top headlines</Title>\r\n            <NewsSelect options={makeSelectOptions(categories)} value={category} onChange={onChangeCategory}/>\r\n\r\n            <Skeleton active loading={isLoading}>\r\n                {isSuccess &&\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={data.articles}\r\n                        size={'small'}\r\n                        style={isFetching ? {opacity: 0.5} : undefined}\r\n                        renderItem={article => (\r\n                            <List.Item style={{padding: '7px 0'}}>\r\n                                <ArticleMeta title={article.title} url={article.url} author={article.author}\r\n                                             publishedAt={article.publishedAt} sourceName={article.source.name}/>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                }\r\n                {\r\n                    isError && <ErrorMessage text={parseFetchError(error)}/>\r\n                }\r\n            </Skeleton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TopHeadlines;","import {Col, Row} from \"antd\";\r\nimport Everything from \"./Everything/Everything\";\r\nimport TopHeadlines from \"./TopHeadlines/TopHeadlines\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useEffect} from \"react\";\r\n\r\n\r\nconst News = () => {\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV === 'production') {\r\n            navigate(\"/404\", {replace: true});\r\n        }\r\n    }, [navigate]);\r\n\r\n    return (\r\n        <Row gutter={16}>\r\n            <Col span={6}>\r\n                <TopHeadlines/>\r\n            </Col>\r\n            <Col span={18}>\r\n                <Everything/>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default News","import {Pagination} from \"antd\";\r\n\r\ntype PaginationAppProps = {\r\n    total: number,\r\n    pageSize: number,\r\n    current: number,\r\n    handler: (page: number, pageSize: number) => void\r\n}\r\n\r\n\r\nconst PaginationApp = ({total, pageSize, current, handler}: PaginationAppProps): JSX.Element => {\r\n\r\n    const handlePageChange = (page: number) => {\r\n        handler(page, pageSize);\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: 'center', marginTop: 12, height: 32, lineHeight: '32px',}}>\r\n            <Pagination total={total}\r\n                        pageSize={pageSize}\r\n                        current={current}\r\n                        hideOnSinglePage={true}\r\n                        onChange={handlePageChange}\r\n                        showSizeChanger={false}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PaginationApp"],"names":["useSelect","initialValue","_useState","useState","_useState2","_slicedToArray","value","setValue","selectedValue","_ref","url","title","author","publishedAt","sourceName","timeAgo","formatDistanceToNow","Date","description","concat","_jsx","List","href","target","children","query","sortBy","searchIn","sources","from","to","page","setPage","_useState3","pageSize","_useGetEverythingQuer","useGetEverythingQuery","q","language","skip","length","data","isSuccess","isError","error","_jsxs","_Fragment","itemLayout","size","dataSource","articles","footer","PaginationApp","total","totalResults","current","handler","renderItem","article","extra","AvatarApp","src","urlToImage","shape","style","padding","ArticleMeta","source","name","content","ErrorMessage","text","parseFetchError","Text","Typography","heading","onChange","isMultiple","options","display","marginBottom","Select","mode","undefined","width","makeSelectOptions","values","map","v","label","charAt","toUpperCase","slice","sortByOptions","sortingOrders","searchInOptions","searchInValues","RangePicker","DatePicker","onQueryChange","onSortByChange","onSearchInChange","searchInDefault","onSourceChange","setDateStrings","dates","setDates","_useGetSourcesQuery","useGetSourcesQuery","country","isLoading","sourceOptions","useMemo","id","Input","placeholder","prefix","SearchOutlined","allowClear","Row","gutter","Col","span","NewsSelect","formatString","disabledDate","monthAgo","dayjs","subtract","startOf","endOfCurrent","endOf","allowEmpty","Skeleton","active","marginTop","setQuery","deferredQuery","useDeferredValue","_useSelect","_useSelect2","_useSelect3","_useSelect4","_useSelect5","_useSelect6","_useState4","dateStrings","filterProps","e","Filter","_objectSpread","EverythingList","toString","Title","category","onChangeCategory","_useGetTopHeadlinesQu","useGetTopHeadlinesQuery","isFetching","level","categories","loading","opacity","navigate","useNavigate","useEffect","replace","TopHeadlines","Everything","textAlign","height","lineHeight","Pagination","hideOnSinglePage","showSizeChanger"],"sourceRoot":""}