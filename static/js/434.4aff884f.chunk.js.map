{"version":3,"file":"static/js/434.4aff884f.chunk.js","mappings":"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","sources":["hooks/useSelect.ts","components/Main/News/ArticleMeta/ArticleMeta.tsx","components/Main/News/Everything/EverythingList/EverythingList.tsx","components/Main/News/NewsSelect/NewsSelect.tsx","utils/makeSelectOptions.ts","components/Main/News/Everything/Filter/Filter.tsx","components/Main/News/Everything/Everything.tsx","components/Main/News/TopHeadlines/TopHeadlines.tsx","components/Main/News/News.tsx","components/PaginationApp/PaginationApp.tsx"],"sourcesContent":["import {useState} from \"react\";\r\n\r\nexport type ArrayOrValue<T> = T extends T[] ? T[] : T\r\n\r\nexport const useSelect = <T>(initialValue: ArrayOrValue<T>): [ArrayOrValue<T>, (v: string | string[]) => void] => {\r\n    const [value, setValue] = useState<ArrayOrValue<T>>(initialValue)\r\n\r\n    const onChange = (selectedValue: string | string[]) => {\r\n        if (selectedValue === value) return\r\n\r\n        setValue(selectedValue as ArrayOrValue<T>)\r\n    }\r\n\r\n    return [value, onChange]\r\n}","import React from 'react';\r\nimport {List} from \"antd\";\r\nimport {formatDistanceToNow} from \"date-fns\";\r\n\r\ntype ArticleMetaProps = {\r\n    url: string\r\n    title: string\r\n    author: string\r\n    publishedAt: string,\r\n    sourceName: string\r\n}\r\n\r\nfunction ArticleMeta({url, title, author, publishedAt, sourceName}: ArticleMetaProps) {\r\n    const timeAgo = formatDistanceToNow(new Date(publishedAt))\r\n    const description = `${author || sourceName}: ${timeAgo} ago`\r\n\r\n    return (\r\n        <List.Item.Meta\r\n            title={<a href={url} target='_blank'>{title}</a>}\r\n            description={description}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ArticleMeta;","import React, {useState} from 'react';\r\nimport {List} from \"antd\";\r\nimport PaginationApp from \"../../../../PaginationApp/PaginationApp\";\r\nimport AvatarApp from \"../../../../AvatarApp/AvatarApp\";\r\nimport ArticleMeta from \"../../ArticleMeta/ArticleMeta\";\r\nimport ErrorMessage from \"../../../../ErrorMessage/ErrorMessage\";\r\nimport {parseFetchError} from \"../../../../../utils/parseFetchError\";\r\nimport {SearchInMultiple, SortingOrder, useGetEverythingQuery} from \"../../../../../features/news/news\";\r\n\r\ntype EverythingListProps = {\r\n    query: string\r\n    sortBy: SortingOrder\r\n    searchIn: SearchInMultiple\r\n    sources: string\r\n    from: string\r\n    to: string\r\n}\r\n\r\nfunction EverythingList({query, sortBy, searchIn, sources, from, to}: EverythingListProps) {\r\n    const [page, setPage] = useState(1)\r\n    const [pageSize] = useState(10)\r\n    const handlePageChange = (page: number) => {\r\n        setPage(page)\r\n    }\r\n\r\n    const {data, isSuccess, isError, error} = useGetEverythingQuery({\r\n        q: query,\r\n        pageSize,\r\n        page,\r\n        language: 'en',\r\n        sortBy,\r\n        searchIn: searchIn,\r\n        sources: sources,\r\n        from,\r\n        to\r\n    }, {skip: query.length < 3})\r\n\r\n    return (\r\n        <>\r\n            {\r\n                isSuccess &&\r\n                <List\r\n                    itemLayout=\"vertical\"\r\n                    size=\"large\"\r\n                    dataSource={data.articles}\r\n                    footer={<PaginationApp total={data.totalResults} current={page} pageSize={10}\r\n                                           handler={handlePageChange}/>}\r\n                    renderItem={(article) => (\r\n                        <List.Item\r\n                            key={article.title}\r\n                            extra={<AvatarApp src={article.urlToImage} size={272} shape='square'/>}\r\n                            style={{padding: '8px 0'}}\r\n                        >\r\n                            <ArticleMeta title={article.title} url={article.url} author={article.author}\r\n                                         publishedAt={article.publishedAt} sourceName={article.source.name}/>\r\n                            {article.content}\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            }\r\n\r\n            {\r\n                isError && <ErrorMessage text={parseFetchError(error)}/>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EverythingList;","import React, {useMemo} from 'react';\r\nimport {Select, Typography} from \"antd\";\r\nimport {arEG} from \"date-fns/locale\";\r\n\r\nconst {Text} = Typography;\r\n\r\ntype NewsSelectProps = {\r\n    heading?: string\r\n    isMultiple?: boolean\r\n    value: string | string[]\r\n    onChange: (value: string | string[]) => void\r\n\r\n    options: Array<{ value: string, label: string }>\r\n}\r\n\r\nfunction NewsSelect({heading, onChange, isMultiple, options, value}: NewsSelectProps) {\r\n    return (\r\n        <>\r\n            {heading && <Text style={{display: 'block', marginBottom: '4px'}}>{heading}: </Text>}\r\n            <Select\r\n                mode={isMultiple ? 'multiple' : undefined}\r\n                value={value}\r\n                onChange={onChange}\r\n                style={{width: '200px', marginBottom: '16px'}}\r\n                options={options}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewsSelect;","export const makeSelectOptions = (values: readonly string[]) => {\r\n    return values.map(v => ({value: v, label: v.charAt(0).toUpperCase() + v.slice(1)}))\r\n}","import React, {useMemo, useState} from 'react';\r\nimport {Col, DatePicker, Input, Row, Skeleton} from \"antd\";\r\nimport {SearchOutlined} from \"@ant-design/icons\";\r\nimport NewsSelect from \"../../NewsSelect/NewsSelect\";\r\nimport dayjs, {Dayjs} from \"dayjs\";\r\nimport {\r\n    SearchIn,\r\n    searchInValues,\r\n    SortingOrder,\r\n    sortingOrders,\r\n    useGetSourcesQuery\r\n} from \"../../../../../features/news/news\";\r\nimport {makeSelectOptions} from \"../../../../../utils/makeSelectOptions\";\r\n\r\nconst sortByOptions = makeSelectOptions(sortingOrders)\r\nconst searchInOptions = makeSelectOptions(searchInValues)\r\nconst {RangePicker} = DatePicker;\r\ntype RangeValue = [Dayjs | null, Dayjs | null] | null;\r\ntype FilterProps = {\r\n    query: string\r\n    onQueryChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n    sortBy: SortingOrder\r\n    onSortByChange: (v: string | string[]) => void\r\n    searchIn: SearchIn[]\r\n    onSearchInChange: (v: string | string[]) => void\r\n    searchInDefault: SearchIn[]\r\n    source: string[]\r\n    onSourceChange: (v: string | string[]) => void\r\n    setDateStrings: (v: string[]) => void\r\n}\r\n\r\nfunction Filter({\r\n                    query,\r\n                    onQueryChange,\r\n                    sortBy,\r\n                    onSortByChange,\r\n                    searchIn,\r\n                    onSearchInChange,\r\n                    searchInDefault,\r\n                    source,\r\n                    onSourceChange,\r\n                    setDateStrings\r\n                }: FilterProps) {\r\n    const [dates, setDates] = useState<RangeValue>(null);\r\n    const onDatesChange = (values: RangeValue, formatString: [string, string]) => {\r\n        setDates(values)\r\n        setDateStrings(formatString)\r\n    }\r\n    const disabledDate = (current: Dayjs) => {\r\n        const monthAgo = dayjs().subtract(1, 'month').startOf('day')\r\n        const endOfCurrent = dayjs().endOf('day')\r\n\r\n        return current && (current < monthAgo || current > endOfCurrent)\r\n    }\r\n\r\n    const {data, isLoading, isSuccess} = useGetSourcesQuery({\r\n        language: 'en',\r\n        country: 'us'\r\n    })\r\n\r\n    const sourceOptions = useMemo(() => {\r\n        if (isSuccess && data) {\r\n            return data.sources.map(source => ({value: source.id, label: source.name}))\r\n        }\r\n    }, [data, isSuccess])\r\n\r\n    const handleSourceChange = (v: string | string[]) => {\r\n        if (v.length > 20) return\r\n        onSourceChange(v)\r\n    }\r\n\r\n    const handleSearchInChange = (v: string | string[]) => {\r\n        onSearchInChange(v.length ? v : searchInDefault)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Input value={query}\r\n                   onChange={onQueryChange}\r\n                   size=\"large\"\r\n                   placeholder=\"Keywords or a phrase to search for\"\r\n                   prefix={<SearchOutlined/>}\r\n                   allowClear\r\n                   style={{marginBottom: '16px'}}/>\r\n\r\n            <Row gutter={16} style={{marginBottom: '36px'}}>\r\n                <Col span={8}>\r\n                    <NewsSelect heading={'Sort by'} options={sortByOptions} onChange={onSortByChange} value={sortBy}/>\r\n                    <RangePicker onChange={onDatesChange} value={dates}\r\n                                 disabledDate={disabledDate} allowEmpty={[true, true]}/>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <NewsSelect heading={'Search in'} value={searchIn} options={searchInOptions}\r\n                                onChange={handleSearchInChange} isMultiple={true}/>\r\n                </Col>\r\n                <Col span={8}>\r\n                    {isLoading &&\r\n                        <Skeleton.Input active style={{marginTop: '26px'}}/>}\r\n                    {isSuccess &&\r\n                        <NewsSelect heading={'Sources'}\r\n                                    options={sourceOptions!}\r\n                                    value={source}\r\n                                    onChange={handleSourceChange}\r\n                                    isMultiple={true}/>}\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Filter;","import React, {useDeferredValue, useState} from 'react';\r\nimport {SearchIn, SearchInMultiple, SortingOrder} from \"../../../../features/news/news\";\r\nimport {useSelect} from \"../../../../hooks/useSelect\";\r\nimport EverythingList from \"./EverythingList/EverythingList\";\r\nimport Filter from \"./Filter/Filter\";\r\n\r\nfunction Everything() {\r\n    const searchInDefault: SearchIn[] = ['title', 'description', 'content']\r\n\r\n    const [query, setQuery] = useState('')\r\n    const onQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => setQuery(e.target.value)\r\n    const deferredQuery = useDeferredValue(query);\r\n    const [sortBy, onSortByChange] = useSelect<SortingOrder>('relevancy')\r\n    const [searchIn, onSearchInChange] = useSelect<SearchIn[]>(searchInDefault)\r\n    const [source, onSourceChange] = useSelect<string[]>([])\r\n    const [dateStrings, setDateStrings] = useState<string[]>([])\r\n\r\n    const filterProps = {\r\n        query,\r\n        onQueryChange,\r\n        sortBy,\r\n        onSortByChange,\r\n        searchIn,\r\n        onSearchInChange,\r\n        searchInDefault,\r\n        source,\r\n        onSourceChange,\r\n        setDateStrings\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Filter {...filterProps}/>\r\n            <EverythingList query={deferredQuery}\r\n                            sortBy={sortBy}\r\n                            searchIn={searchIn.toString() as SearchInMultiple}\r\n                            sources={source.toString()}\r\n                            from={dateStrings[0]}\r\n                            to={dateStrings[1]}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Everything;","import React from 'react';\r\nimport {List, Skeleton, Typography} from \"antd\";\r\nimport {categories, Category, useGetTopHeadlinesQuery} from \"../../../../features/news/news\";\r\nimport ErrorMessage from \"../../../ErrorMessage/ErrorMessage\";\r\nimport {parseFetchError} from \"../../../../utils/parseFetchError\";\r\nimport ArticleMeta from \"../ArticleMeta/ArticleMeta\";\r\nimport NewsSelect from \"../NewsSelect/NewsSelect\";\r\nimport {useSelect} from \"../../../../hooks/useSelect\";\r\nimport {makeSelectOptions} from \"../../../../utils/makeSelectOptions\";\r\n\r\nconst {Title} = Typography;\r\n\r\nfunction TopHeadlines() {\r\n    const [category, onChangeCategory] = useSelect<Category>('general')\r\n\r\n    const {data, isLoading, isFetching, isSuccess, isError, error} = useGetTopHeadlinesQuery({\r\n        country: 'us',\r\n        category,\r\n        pageSize: 5,\r\n        page: 1\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Title level={2}>Top headlines</Title>\r\n            <NewsSelect options={makeSelectOptions(categories)} value={category} onChange={onChangeCategory}/>\r\n\r\n            <Skeleton active loading={isLoading}>\r\n                {isSuccess &&\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={data.articles}\r\n                        size={'small'}\r\n                        style={isFetching ? {opacity: 0.5} : undefined}\r\n                        renderItem={article => (\r\n                            <List.Item style={{padding: '7px 0'}}>\r\n                                <ArticleMeta title={article.title} url={article.url} author={article.author}\r\n                                             publishedAt={article.publishedAt} sourceName={article.source.name}/>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                }\r\n                {\r\n                    isError && <ErrorMessage text={parseFetchError(error)}/>\r\n                }\r\n            </Skeleton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TopHeadlines;","import {Col, Row} from \"antd\";\r\nimport Everything from \"./Everything/Everything\";\r\nimport TopHeadlines from \"./TopHeadlines/TopHeadlines\";\r\n\r\n\r\nconst News = (): JSX.Element => {\r\n    return (\r\n        <Row gutter={16}>\r\n            <Col span={6}>\r\n                <TopHeadlines/>\r\n            </Col>\r\n            <Col span={18}>\r\n                <Everything/>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default News","import {Pagination} from \"antd\";\r\n\r\ntype PaginationAppProps = {\r\n    total: number,\r\n    pageSize: number,\r\n    current: number,\r\n    handler: (page: number, pageSize: number) => void\r\n}\r\n\r\n\r\nconst PaginationApp = ({total, pageSize, current, handler}: PaginationAppProps): JSX.Element => {\r\n\r\n    const handlePageChange = (page: number) => {\r\n        handler(page, pageSize);\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: 'center', marginTop: 12, height: 32, lineHeight: '32px',}}>\r\n            <Pagination total={total}\r\n                        pageSize={pageSize}\r\n                        current={current}\r\n                        hideOnSinglePage={true}\r\n                        onChange={handlePageChange}\r\n                        showSizeChanger={false}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PaginationApp"],"names":["useSelect","initialValue","useState","value","setValue","selectedValue","url","title","author","publishedAt","sourceName","timeAgo","formatDistanceToNow","Date","description","href","target","query","sortBy","searchIn","sources","from","to","page","setPage","pageSize","useGetEverythingQuery","q","language","skip","length","data","isSuccess","isError","error","itemLayout","size","dataSource","articles","footer","PaginationApp","total","totalResults","current","handler","renderItem","article","extra","AvatarApp","src","urlToImage","shape","style","padding","source","name","content","ErrorMessage","text","parseFetchError","Text","Typography","heading","onChange","isMultiple","options","display","marginBottom","mode","undefined","width","makeSelectOptions","values","map","v","label","charAt","toUpperCase","slice","sortByOptions","sortingOrders","searchInOptions","searchInValues","RangePicker","DatePicker","onQueryChange","onSortByChange","onSearchInChange","searchInDefault","onSourceChange","setDateStrings","dates","setDates","useGetSourcesQuery","country","isLoading","sourceOptions","useMemo","id","placeholder","prefix","SearchOutlined","allowClear","gutter","span","formatString","disabledDate","monthAgo","dayjs","subtract","startOf","endOfCurrent","endOf","allowEmpty","active","marginTop","setQuery","deferredQuery","useDeferredValue","dateStrings","filterProps","e","toString","Title","category","onChangeCategory","useGetTopHeadlinesQuery","isFetching","level","categories","loading","opacity","textAlign","height","lineHeight","hideOnSinglePage","showSizeChanger"],"sourceRoot":""}