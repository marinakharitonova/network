{"version":3,"file":"static/js/580.ebc3357e.chunk.js","mappings":"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","sources":["components/Main/Chat/MessagesList/MessagesList.tsx","components/Main/Chat/NewMessageForm/NewMessageForm.tsx","components/Main/Chat/Chat.tsx"],"sourcesContent":["import React, {useEffect} from \"react\";\r\nimport {ChatMessage} from \"../../../../features/api/apiSlice\";\r\nimport {List} from \"antd\";\r\nimport AvatarApp from \"../../../AvatarApp/AvatarApp\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ntype MessagesListProps = {\r\n    messages: ChatMessage[]\r\n    onLoadCb: () => void\r\n}\r\n\r\nconst MessagesList = ({messages, onLoadCb}: MessagesListProps): JSX.Element => {\r\n\r\n    useEffect(() => {\r\n        onLoadCb()\r\n    }, [onLoadCb])\r\n\r\n    return (\r\n        <List\r\n            itemLayout=\"horizontal\"\r\n            dataSource={messages}\r\n            split={false}\r\n            style={{}}\r\n            className={'chat-list'}\r\n            renderItem={message => (\r\n                <List.Item style={{\r\n                    padding: '0',\r\n                    margin: '10px',\r\n                }}>\r\n                    <List.Item.Meta\r\n                        avatar={<Link to={`/profile/${message.userId}`}><AvatarApp src={message.photo}\r\n                                                                                   size={40}/></Link>}\r\n                        title={<Link to={`/profile/${message.userId}`}>{message.userName}</Link>}\r\n                        description={message.message}\r\n                    />\r\n                </List.Item>\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nexport default MessagesList","import TextArea from \"antd/es/input/TextArea\";\r\nimport {Button, Form} from \"antd\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\ntype NewMessageFormProps = {\r\n    onMessageSend: (v: string) => void\r\n}\r\n\r\nconst NewMessageForm = ({onMessageSend} : NewMessageFormProps): JSX.Element => {\r\n    const [form] = Form.useForm();\r\n    const [, forceUpdate] = useState({});\r\n\r\n    useEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const onFinish = (values: any) => {\r\n        onMessageSend(values.message)\r\n        form.resetFields()\r\n    }\r\n\r\n    const isBtnDisabled = () => {\r\n        return !form.getFieldsValue(true).message\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            name=\"newMessage\"\r\n            form={form}\r\n            onFinish={onFinish}\r\n            autoComplete=\"off\"\r\n            style={{marginTop: 'auto'}}\r\n        >\r\n            <Form.Item\r\n                name=\"message\"\r\n                style={{marginBottom: '15px'}}\r\n            >\r\n                <TextArea showCount maxLength={300} placeholder={'Type your message'}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item shouldUpdate style={{marginBottom: 0}}>\r\n                {() => (\r\n                    <>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            disabled={isBtnDisabled()}\r\n                        >\r\n                            Send\r\n                        </Button>\r\n                    </>\r\n\r\n                )}\r\n            </Form.Item>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default NewMessageForm","import React, {useRef} from \"react\";\r\nimport MessagesList from \"./MessagesList/MessagesList\";\r\nimport NewMessageForm from \"./NewMessageForm/NewMessageForm\";\r\nimport {withAuth} from \"../../../hoc/withAuth\";\r\nimport {useGetMessagesQuery, useSendMessageMutation} from \"../../../features/chat/chatSlice\";\r\n\r\nconst Chat = (): JSX.Element => {\r\n\r\n    const {data, isSuccess} = useGetMessagesQuery()\r\n    const [sendMessage] = useSendMessageMutation()\r\n\r\n    const scrollContainerRef = useRef<HTMLDivElement>(null)\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div style={{\r\n                marginBottom: '36px',\r\n                minHeight: '500px',\r\n                maxHeight: '500px',\r\n                overflow: 'auto',\r\n                border: '1px solid #d9d9d9',\r\n                borderRadius: '6px'\r\n            }} ref={scrollContainerRef}>\r\n                {isSuccess && data.length > 0 && <MessagesList messages={data} onLoadCb={\r\n                    () => {\r\n                        if (scrollContainerRef.current != null && isSuccess) {\r\n                            const scrollHeight = scrollContainerRef.current.scrollHeight\r\n                            scrollContainerRef.current.scrollTo(0, scrollHeight)\r\n                        }\r\n                    }\r\n                }/>}\r\n            </div>\r\n\r\n            <NewMessageForm onMessageSend={sendMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuth(Chat)"],"names":["_ref","messages","onLoadCb","useEffect","_jsx","List","itemLayout","dataSource","split","style","className","renderItem","message","padding","margin","children","avatar","Link","to","concat","userId","AvatarApp","src","photo","size","title","userName","description","onMessageSend","_Form$useForm","Form","form","_slicedToArray","_useState","useState","forceUpdate","_jsxs","name","onFinish","values","resetFields","autoComplete","marginTop","marginBottom","TextArea","showCount","maxLength","placeholder","shouldUpdate","_Fragment","Button","type","htmlType","disabled","getFieldsValue","withAuth","_useGetMessagesQuery","useGetMessagesQuery","data","isSuccess","_useSendMessageMutati","useSendMessageMutation","sendMessage","scrollContainerRef","useRef","minHeight","maxHeight","overflow","border","borderRadius","ref","length","MessagesList","current","scrollHeight","scrollTo","NewMessageForm"],"sourceRoot":""}